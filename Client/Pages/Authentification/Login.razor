@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject IAuthentificator Authentificator
@inject NavigationManager Navigator

<div>
    <MudCard>
        <MudCardContent>
            <MudForm @ref="form">
                <MudTextField @bind-Value="user.email" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>
                <MudTextField @bind-Value="user.password" T="string" Label="Password" @ref="pwField1"
                              InputType="InputType.Password"
                              RequiredError="Password is required!"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="LoginEvent">Login</MudButton>
        </MudCardActions>
    </MudCard>
    
    <MudExpansionPanels>
        <MudExpansionPanel Text="@($"Show Errors ({errors.Length})")">
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudExpansionPanel>
    </MudExpansionPanels>
</div>
@code {
    private CredentialsT user {get; set;} = new CredentialsT {};
    bool success => user.email != null && user.password != null;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    private async Task LoginEvent(){
        var u = await Authentificator.Login(user.email, user.password);
        if(u is not null){
            switch (u.role)
            {
                case State.Rentee:
                    Navigator.NavigateTo($"/Client/{u.id}");
                    break;
                case State.Renter :                        
                    Navigator.NavigateTo($"/Admin/{u.id}");
                    break;
            }
        } else {
            errors.Append("Invalid email or password");
            Console.WriteLine("Invalid email or password");
        }
        StateHasChanged();
    }
}